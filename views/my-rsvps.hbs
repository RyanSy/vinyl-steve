{{>navbar}}

<br>

<div class="container-fluid d-flex w-auto vh-100 p-3 flex-column">
    <div class="d-flex flex-column align-items-center">
        <h3>My RSVPs</h3>
    </div>

    <hr>

    {{#if message}}
    <div class="align-items-center d-flex w-auto vh-100 flex-column">
        <p>
        <h4>{{message}}</h4>
        </p>

        <p>
            <a class="btn btn-primary" href="/home">Return to list of shows</a>
        </p>
    </div>
    {{/if}}

    {{#if discountFailure}}
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        {{discountFailure}}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    {{/if}}

    {{#if discountSuccess}}
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        {{discountSuccess}}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    {{/if}}

    {{#if shows}}
    <div class="row px-2 pt-3 pb-2">
        <div class="col-3">
            Date
        </div>
        <div class="col-3">
            Show
        </div>
        <div class="col-2">
            # of Tables
        </div>
        <div class="col-2">
            Paid
        </div>
    </div>
    {{/if}}
    
    {{#each shows}}
    <div class="row px-2 pt-3 pb-2">
        <div class="col-3">
            {{this.month}} {{this.day}}, {{this.year}}
        </div>
        <div class="col-3">
            {{this.name}}<br>{{this.city}}, {{this.state}}
        </div>
        <div class="col-2">
            {{this.number_of_tables}}
        </div>
        <div class="col-2">
            {{#if this.paid}}
            Yes
            {{else}}
            No <br>
            (${{this.rent_due}} due) <br>
            <a href="#" data-bs-toggle="modal" data-bs-target="#discountModal">Discount</a>
            {{/if}}

            <div class="modal fade" id="discountModal" tabindex="-1" aria-labelledby="discountModalLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content text-secondary">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="exampleModalLabel">Enter Discount Code:</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form action="/save-discount" method="post">
                                <input type="hidden" name="id" value="{{this.id}}">
                                <input type="hidden" name="email" value="{{../email}}">
                                <input type="hidden" name="rent" value="{{this.rent_due}}">
                                <div class="form-group mb-3">
                                    <input type="text" name="code">
                                </div>
                                <div class="form-group mb-3">
                                    <button type="button" class="btn btn-secondary text-white"
                                        data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Submit</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-2">
            <form action="/edit-rsvp" method="post">
                <input type="hidden" name="email" value="{{../email}}">
                <input type="hidden" name="id" value="{{this.id}}">
                {{#if this.paid}}
                {{else}}
                <button type="button" class="btn btn-success mx-2 mb-2" data-bs-toggle="modal"
                    data-bs-target="#paymentModal"><i class="bi bi-currency-dollar"></i></button>
                <button type="submit" class="btn btn-warning mx-2 mb-2"><i class="bi bi-pencil"></i></button>
                {{/if}}
                <button type="button" class="btn btn-danger mx-2 mb-2" data-bs-toggle="modal"
                    data-bs-target="#deleteModal"><i class="bi bi-x-lg"></i></button>
            </form>

        </div>
    </div>

    <!-- Delete Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-secondary">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Confirm Delete</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Delete this RSVP?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary text-white" data-bs-dismiss="modal">Close</button>
                    <form action="/delete-rsvp/{{this.id}}" method="post">
                        <input type="hidden" name="show_id" value="{{this.id}}">
                        <input type="hidden" name="number_of_tables" value="{{this.number_of_tables}}">
                        <input type="hidden" name="name" value="{{../name}}">
                        <input type="hidden" name="email" value="{{../email}}">
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    {{!-- payment modal --}}
    <div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content text-secondary">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Rent Payment</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Amount Due: ${{this.rent_due}} rent + $5 fee</p>
                    <form id="savePaymentForm" action="/save-payment" method="post">
                        <input type="hidden" name="email" value="{{../email}}">
                        <input type="hidden" name="id" value="{{this.id}}">
                        <input type="hidden" name="rent_due" value="{{this.rent_due}}">
                        <input type="hidden" name="paid" value="true">
                    </form>

                    <div class="form-group mb-3">
                        <div id="paypal-button-container"></div>
                        <p id="result-message"></p>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary text-white" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script
        src="https://www.paypal.com/sdk/js?client-id={{../paypalClientId}}&components=buttons&enable-funding=venmo,card&disable-funding=paylater"
        data-sdk-integration-source="integrationbuilder_sc"></script>

    <script>
        let cart = {
            id: '{{id}}',
            paid: true,
            rentDue: {{ this.rent_due }} + 5
        };

        // after successful payment, submit save payment form
        const savePaymentForm = document.getElementById('savePaymentForm');
        async function submitPaymentForm() {
            savePaymentForm.submit();
        }

        window.paypal
            .Buttons({
                style: {
                    shape: "rect",
                    layout: "vertical",
                },
                async createOrder() {
                    try {
                        const response = await fetch("/api/orders", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            // use the "body" param to optionally pass additional order information
                            // like product ids and quantities
                            body: JSON.stringify({
                                cart: [cart]
                            }),
                        });

                        const orderData = await response.json();

                        if (orderData.id) {
                            return orderData.id;
                        } else {
                            const errorDetail = orderData?.details?.[0];
                            const errorMessage = errorDetail
                                ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})`
                                : JSON.stringify(orderData);

                            throw new Error(errorMessage);
                        }
                    } catch (error) {
                        console.error(error);
                        resultMessage(`Could not initiate PayPal Checkout...<br><br>${error}`);
                    }
                },
                async onApprove(data, actions) {
                    console.log(data.orderID);
                    try {
                        const response = await fetch(`/api/orders/${data.orderID}/capture`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                        });

                        const orderData = await response.json();
                        // Three cases to handle:
                        //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
                        //   (2) Other non-recoverable errors -> Show a failure message
                        //   (3) Successful transaction -> Show confirmation or thank you message

                        const errorDetail = orderData?.details?.[0];

                        if (errorDetail?.issue === "INSTRUMENT_DECLINED") {
                            // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
                            // recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/
                            return actions.restart();
                        } else if (errorDetail) {
                            // (2) Other non-recoverable errors -> Show a failure message
                            throw new Error(`${errorDetail.description} (${orderData.debug_id})`);
                        } else if (!orderData.purchase_units) {
                            throw new Error(JSON.stringify(orderData));
                        } else {
                            // (3) Successful transaction -> Show confirmation or thank you message
                            // Or go to another URL:  actions.redirect('thank_you.html');
                            submitPaymentForm();
                            const transaction =
                                orderData?.purchase_units?.[0]?.payments?.captures?.[0] ||
                                orderData?.purchase_units?.[0]?.payments?.authorizations?.[0];
                            resultMessage(
                                `Transaction ${transaction.status}! Transaction ID: ${transaction.id}`,
                            );
                            console.log(
                                "Capture result",
                                orderData,
                                JSON.stringify(orderData, null, 2),
                            );
                        }
                    } catch (error) {
                        console.error(error);

                        // fetch transaction error page?

                        resultMessage(
                            `Sorry, your transaction could not be processed...<br><br>${error}`,
                        );
                    }
                },
            })
            .render("#paypal-button-container");

        // Example function to show a result to the user. Your site's UI library can be used instead.
        function resultMessage(message) {
            const container = document.querySelector("#result-message");
            container.innerHTML = message;
        }
    </script>

    {{/each}}

    <br>

    <div class="align-items-center d-flex py-3 my-3 flex-column">
        <p>
            <a class="btn btn-primary" href="/home">Return to list of shows</a>
        </p>
    </div>
</div>

{{> footer}}